class Solution {
    public int mergeIntervals(int[][] intervals) {
        int n = intervals.length;
        Arrays.sort(intervals , (a , b) -> Integer.compare(a[0] , b[0]));

        List<int[]> ans = new ArrayList<>();
        ans.add(intervals[0]);
        for(int i = 1; i < n; i++) {
            int x = intervals[i][0];
            int y = intervals[i][1];

            if(x < ans.get(ans.size() - 1)[1]) {
                ans.get(ans.size() - 1)[1] = Math.max(ans.get(ans.size() - 1)[1] , y);
            }
            else {
                ans.add(new int[] {x , y});
            }
        }
        return ans.size();
    }
    public boolean checkValidCuts(int n, int[][] rectangles) {
        List<int[]> horizontal = new ArrayList<>();
        List<int[]> vertical = new ArrayList<>();
        for(int i = 0; i < rectangles.length; i++) {
            int x1 = rectangles[i][0];
            int y1 = rectangles[i][1];
            int x2 = rectangles[i][2];
            int y2 = rectangles[i][3];

            horizontal.add(new int[]{x1 , x2});
            vertical.add(new int[]{y1 , y2});
            
        }

        int[][] horArray = new int[horizontal.size()][2];
        for(int i = 0; i < horArray.length; i++) {
            horArray[i][0] = horizontal.get(i)[0];
            horArray[i][1] = horizontal.get(i)[1];
        }
        int[][] vertArray = new int[vertical.size()][2];
        for(int i = 0; i < vertArray.length; i++) {
            vertArray[i][0] = vertical.get(i)[0];
            vertArray[i][1] = vertical.get(i)[1];
        }
       
        if(mergeIntervals(horArray) >= 3)
          return true;
        if(mergeIntervals(vertArray) >= 3)
          return true;
        return false;
    }
}
